CREATE DATABASE CARS;
USE CARS;
SELECT * FROM CARS;
SELECT * FROM CUSTOMER;
SELECT * FROM LOCATIONS;
SELECT * FROM RENTALS;
SELECT * FROM PAYMENTS;
SELECT * FROM EMPLOYEE;


-- Q1. List all cars that are currently available for rent.

SELECT * FROM cars WHERE Availability = 'Available';


-- Q2. Show employees working in the 'Los Angeles' branch.

SELECT * FROM employee WHERE Branch = 'Los Angeles';


-- Q3. Retrieve all payment transactions made using Credit Card.

SELECT * FROM payments WHERE Payment_Method = 'Credit Card';

-- Q4. Count the total number of rentals per branch.

SELECT Branch, COUNT(*) AS Total_Rentals 
FROM rentals 
GROUP BY Branch;


-- Q5. Find the average rental amount paid per transaction.

SELECT ROUND(AVG(Amount),2) AS Avg_Rental_Amount FROM payments;


-- Q6. Show the total revenue generated by each rental branch.

SELECT r.Branch, ROUND(SUM(p.Amount),2) AS Total_Revenue
FROM rentals r
JOIN payments p ON r.Rental_ID = p.Rental_ID
GROUP BY r.Branch;


-- Q7. Find the most rented car model.

SELECT c.Car_Model, COUNT(r.Car_ID) AS Rental_Count
FROM rentals r
JOIN cars c ON r.Car_ID = c.Car_ID
GROUP BY c.Car_Model
ORDER BY Rental_Count DESC
LIMIT 1;

-- Q8. Get the total number of customers.

SELECT COUNT(*) AS Total_CustomerS FROM customer;


-- Q9. Retrieve rental details along with customer and employee names.

SELECT r.Rental_ID, c.Customer_Name, e.Employee_Name, r.Rental_Date, r.Return_Date
FROM rentals r
JOIN customer c ON r.Customer_ID = c.Customer_ID
JOIN employee e ON r.Employee_ID = e.Employee_ID;


-- Q10. Show all payments along with customer names.

SELECT p.Payment_ID, c.Customer_Name, p.Amount, p.Payment_Date, p.Payment_Method
FROM payments p
JOIN rentals r ON p.Rental_ID = r.Rental_ID
JOIN customer c ON r.Customer_ID = c.Customer_ID;


-- Q11. Get a list of employees who have processed more than 5 rentals.

SELECT e.Employee_ID, e.Employee_Name, COUNT(r.Rental_ID) AS Rental_Count
FROM rentals r
JOIN employee e ON r.Employee_ID = e.Employee_ID
GROUP BY e.Employee_ID, e.Employee_Name
HAVING Rental_Count > 5
ORDER BY Rental_Count DESC;


-- Q12. Find which customers have rented cars more than 3 times.

SELECT c.Customer_ID, c.Customer_Name, COUNT(r.Rental_ID) AS Rental_Count
FROM rentals r
JOIN customer c ON r.Customer_ID = c.Customer_ID
GROUP BY c.Customer_ID, c.Customer_Name
HAVING Rental_Count > 3
ORDER BY RENTAL_COUNT DESC;


-- Q13. Show rental details with car models and prices.

SELECT r.Rental_ID, c.Car_Model, c.Price_Per_Day, r.Rental_Date, r.Return_Date
FROM rentals r
JOIN cars c ON r.Car_ID = c.Car_ID;

-- Q14. Find the top 5 highest-paying customers.

SELECT c.Customer_ID, c.Customer_Name, ROUND(SUM(p.Amount),2) AS Total_Spent
FROM payments p
JOIN rentals r ON p.Rental_ID = r.Rental_ID
JOIN customer c ON r.Customer_ID = c.Customer_ID
GROUP BY c.Customer_ID, c.Customer_Name
ORDER BY Total_Spent DESC
LIMIT 5;


-- Q15. Show the monthly revenue for the past 6 months.

SELECT DATE_FORMAT(Payment_Date, '%Y-%m') AS Month, ROUND(SUM(Amount),2) AS Monthly_Revenue
FROM payments
WHERE Payment_Date >= CURDATE() - INTERVAL 6 MONTH
GROUP BY Month
ORDER BY Month DESC;


-- Q16. Find customers who have never rented a car.

SELECT c.Customer_ID, c.Customer_Name
FROM customer c
LEFT JOIN rentals r ON c.Customer_ID = r.Customer_ID
WHERE r.Customer_ID IS NULL;


-- Q17. Get the most active employee (who handled the most rentals).

SELECT e.Employee_ID, e.Employee_Name, COUNT(r.Rental_ID) AS Rentals_Handled
FROM rentals r
JOIN employee e ON r.Employee_ID = e.Employee_ID
GROUP BY e.Employee_ID, e.Employee_Name
ORDER BY Rentals_Handled DESC
LIMIT 1;


-- Q18. Find cars that have been rented at least 5 times.

SELECT c.Car_ID, c.Car_Model, COUNT(r.Rental_ID) AS Times_Rented
FROM rentals r
JOIN cars c ON r.Car_ID = c.Car_ID
GROUP BY c.Car_ID, c.Car_Model
HAVING Times_Rented >= 5
ORDER BY Times_Rented DESC;


-- Q19: Which customers have rented the most expensive car available?**

SELECT c.Customer_ID, c.Customer_Name, r.Rental_ID, car.Car_Model, car.Price_Per_Day
FROM rentals r
JOIN customer c ON r.Customer_ID = c.Customer_ID
JOIN cars car ON r.Car_ID = car.Car_ID
WHERE car.Price_Per_Day = (SELECT MAX(Price_Per_Day) FROM cars);


-- Q20: How do employees rank based on total rental revenue they handled?**

SELECT e.Employee_ID, e.Employee_Name, SUM(p.Amount) AS Total_Revenue,
       RANK() OVER (ORDER BY SUM(p.Amount) DESC) AS Revenue_Rank
FROM rentals r
JOIN employee e ON r.Employee_ID = e.Employee_ID
JOIN payments p ON r.Rental_ID = p.Rental_ID
GROUP BY e.Employee_ID, e.Employee_Name
LIMIT 15;


-- Q21: Which cars were rented for the longest duration?**

SELECT r.Car_ID, c.Car_Model, c.Car_Type, 
       DATEDIFF(r.Return_Date, r.Rental_Date) AS Rental_Duration
FROM rentals r
JOIN cars c ON r.Car_ID = c.Car_ID
ORDER BY Rental_Duration DESC
LIMIT 5;


-- Q22: Which branches have generated above-average rental revenue?**

SELECT r.Branch, ROUND(SUM(p.Amount),2) AS Total_Revenue
FROM rentals r
JOIN payments p ON r.Rental_ID = p.Rental_ID
GROUP BY r.Branch
HAVING Total_Revenue > (SELECT AVG(Total_Revenue) FROM 
                        (SELECT SUM(p.Amount) AS Total_Revenue FROM rentals r
                         JOIN payments p ON r.Rental_ID = p.Rental_ID
                         GROUP BY r.Branch) AS BranchRevenue);


-- Q23: Which customers rented cars on consecutive days?

SELECT r1.Customer_ID, c.Customer_Name, r1.Rental_Date AS First_Rental, r2.Rental_Date AS Second_Rental
FROM rentals r1
JOIN rentals r2 ON r1.Customer_ID = r2.Customer_ID AND DATEDIFF(r2.Rental_Date, r1.Rental_Date) = 1
JOIN customer c ON r1.Customer_ID = c.Customer_ID
ORDER BY r1.Customer_ID, r1.Rental_Date;

